<export><workspace name="rest-transactions"><query name="sequential operations" focus="true" active="true" content-source="as:8913582858034499652:" mode="javascript">// Operations can be done in sequence, as separate transactions. 

var commonOptions = 
  {
    "authentication": {
      "method" : "digest",
      "username" : "admin",
      "password" : "admin"
    },
    "headers": {
      "Content-Type": "application/json",
      "Accept": "application/json"
    }
  };

//=============================================================================
// STEP 1: Insert multiple documents
//=============================================================================

var projectDirectory = '/Users/dcassel/git/hands-on-rest/data/';

// Note that these two documents will be inserted using a single request, and therefore a single transaction
var jsonDoc = fn.head(xdmp.documentGet(projectDirectory + '20140721_144421b.jpg.json')).root;
var jpegDoc = fn.head(xdmp.documentGet(projectDirectory + '20140721_144421b.jpg')).root;
var jsonURI = '/image/20140721_144421b.jpg.json';

var encoding = 
  xdmp.multipartEncode(
    'BOUNDARY',
    [
      {
        "headers": {
          "Content-Type":"application/json",
          "Content-Disposition": 'attachment;filename="' + jsonURI + '"'
        },
      },
      {
        "headers": {
          "Content-Type":"image/jpeg",
          "Content-Disposition": 'attachment;filename="/binary/20140721_144421b.jpg"'
        }
      }
    ],
    [
      jsonDoc,
      jpegDoc
    ]
  )

var multiPartOptions = JSON.parse(JSON.stringify(commonOptions));
multiPartOptions.headers = 
  {
    "Content-Type": "multipart/mixed; boundary=BOUNDARY",
    "Accept": "application/json"
  };

var response = xdmp.httpPost(
  'http://localhost:8000/v1/documents',
  multiPartOptions,
  encoding
)

headers = fn.head(response);

if (headers.code !== 200) {
  fn.error(xs.QName('upload-failed'))
}

//=============================================================================
// STEP 2: Add state
//=============================================================================

var patch = 
  {
    "insert": {
      "context": "/location/city",
      "position": "after",
      "content": { state: 'Maine' }
    }
  };

var patchOptions = JSON.parse(JSON.stringify(commonOptions));
patchOptions.headers["X-HTTP-Method-Override"] = "PATCH";

response = xdmp.httpPost(
  'http://localhost:8010/v1/documents?uri=' + jsonURI,
  patchOptions,
  patch
)

headers = fn.head(response);

if (headers.code !== 204) {
  fn.error(xs.QName('add-state-failed'), "failed to add the state", headers)
}

//=============================================================================
// STEP 3: Read document
//=============================================================================

response = xdmp.httpGet(
  'http://localhost:8010/v1/documents?uri=' + jsonURI,
  commonOptions
);

headers = fn.head(response);
content = fn.head(fn.tail(response));

if (headers.code !== 200) {
  fn.error(xs.QName('get-document'), "failed to retrieve document", headers)
} else {
  content
}
</query><query name="multistatement transaction" focus="false" active="true" content-source="as:14059653400360071881:" mode="javascript">// Execute multiple operations as a single transaction
// This must be done atomically -- that is, if any part of the operation fails,
// the entire process must be rolled back. 
// 
// In this case, we're going to change the URI of a binary image to be all 
// lower-case. That means we need to do these things:
// 1. Read a JSON document
// 2. Read the corresponding binary file
// 3. Write the binary to the new URI
// 4. Delete the original binary
// 5. Update the JSON document to point to the new URI

var jsonURI = '/image/01.JPG.json'

var commonOptions = Object.freeze(
  {
    "authentication": {
      "method" : "digest",
      "username" : "admin",
      "password" : "admin"
    },
    "headers": {
      "Content-Type": "application/json",
      "Accept": "application/json"
    }
  });

//=============================================================================
// STEP : Create a transaction
//=============================================================================
var response = xdmp.httpPost(
  'http://localhost:8010/v1/transactions',
  commonOptions
);

headers = fn.head(response);

if (headers.code !== 303) {
  fn.error(xs.QName('create-transaction'), "failed to create a transaction", headers)
}
var txId = headers.headers.location.replace('/v1/transactions/', '')

try {

  //=============================================================================
  // STEP 1: Read the JSON document
  //=============================================================================
  xdmp.log('reading JSON');
  response = xdmp.httpGet(
    'http://localhost:8010/v1/documents?uri=' + jsonURI + '&amp;txid=' + txId,
    commonOptions
  );

  headers = fn.head(response);
  jsonContent = fn.head(fn.tail(response));

  if (headers.code !== 200) {
    fn.error(xs.QName('get-document'), "failed to retrieve JSON document", headers)
  }

  var origImgURI = jsonContent.toObject().binary;

  //=============================================================================
  // STEP 2: Read the corresponding binary file
  //=============================================================================
  xdmp.log('reading binary');
  response = xdmp.httpGet(
    'http://localhost:8010/v1/documents?uri=' + origImgURI + '&amp;txid=' + txId,
    commonOptions
  );

  headers = fn.head(response);
  imgContent = fn.head(fn.tail(response));

  if (headers.code !== 200) {
    fn.error(xs.QName('get-document'), "failed to retrieve image document from " + origImgURI, headers);
  }

  //=============================================================================
  // STEP 3: Write the binary to the new URI
  //=============================================================================
  xdmp.log('saving binary with new URI');
  var updatedImgURI = origImgURI.toLowerCase();

  var imgPutOptions = JSON.parse(JSON.stringify(commonOptions));
  imgPutOptions.headers["Content-Type"] = 'image/jpeg';

  response = xdmp.httpPut(
    'http://localhost:8010/v1/documents?uri=' + updatedImgURI + '&amp;txid=' + txId,
    imgPutOptions,
    imgContent
  );

  headers = fn.head(response);

  if (headers.code !== 201) {
    fn.error(xs.QName('put-image-document'), "failed to load the image document to " + updatedImgURI, headers);
  }

  //=============================================================================
  // STEP 4: Delete the original binary
  //=============================================================================
  xdmp.log('deleting original binary');
  response = xdmp.httpDelete(
    'http://localhost:8010/v1/documents?uri=' + origImgURI + '&amp;txid=' + txId,
    commonOptions
  );

  headers = fn.head(response);

  if (headers.code !== 204) {
    fn.error(xs.QName('delete-image-document'), "failed to delete the image document from " + origImgURI, headers);
  }

  //=============================================================================
  // STEP 5: Update the JSON document to point to the new URI
  //=============================================================================
  xdmp.log('patching JSON');
  var patch = 
    {
      "patch": [
        {
          "replace": {
            "select": "/binary",
            "content": updatedImgURI
          }
        }
      ]
    };

  var patchOptions = JSON.parse(JSON.stringify(commonOptions));
  patchOptions.headers["X-HTTP-Method-Override"] = "PATCH";

  response = xdmp.httpPost(
    'http://localhost:8010/v1/documents?uri=' + jsonURI + '&amp;txid=' + txId,
    patchOptions,
    patch
  )

  headers = fn.head(response);

  if (headers.code !== 204) {
    fn.error(xs.QName('update-json-doc'), "failed to update the JSON document", headers);
  }

  //=============================================================================
  // STEP : Commit the transaction
  //=============================================================================
  xdmp.log('Committing the multi-statement transaction');
  response = xdmp.httpPost(
    'http://localhost:8010/v1/transactions/' + txId + '?result=commit',
    commonOptions
  );

  headers = fn.head(response);

  response

} catch (e) {

  //=============================================================================
  // STEP : Something went wrong -- rollback
  //=============================================================================
  xdmp.log('rolling back: ' + e);
  
  response = xdmp.httpPost(
    'http://localhost:8010/v1/transactions/' + txId + '?result=rollback',
    commonOptions
  );

}

response
</query><query name="reset for multistatement" focus="false" active="true" content-source="as:597104700950068148:" mode="javascript">
declareUpdate();

if (fn.docAvailable('/binary/01.jpg')) {
  xdmp.documentInsert(
    '/binary/01.JPG',
    fn.doc('/binary/01.jpg'),
    xdmp.documentGetPermissions('/binary/01.jpg'),
    xdmp.documentGetCollections('/binary/01.jpg')
  );
}

if (fn.docAvailable('/binary/01.jpg')) {
  xdmp.documentDelete('/binary/01.jpg');
}

var jsonURI = '/image/01.JPG.json';
var jsonDoc = fn.doc(jsonURI);

var docObj = fn.head(jsonDoc).toObject();
if (docObj.binary === '/binary/01.jpg') {
  docObj.binary = '/binary/01.JPG';
  xdmp.documentInsert(
    jsonURI,
    docObj,
    xdmp.documentGetPermissions(jsonURI),
    xdmp.documentGetCollections(jsonURI)
  )
}

</query></workspace></export>
